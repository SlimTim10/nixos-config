* nixos-config

** XMonad Cheatsheet

Keys:
- M1 = Windows key
- M = Alt
- C = Ctrl
- S = Shift

| Key             | Action                     | Program(s)           |
|-----------------+----------------------------+----------------------|
| M1-p            | Launch dmenu (run program) | XMonad               |
| M1-x            | Lock screen                | XMonad / lock-screen |
| M1-space        | Rotate window layout       | XMonad               |
| M1-b            | Toggle xmobar              | XMonad               |
| M1-f            | Full screen layout         | XMonad               |
| M1-o / M1-j     | Focus next window          | XMonad               |
| M1-S-o / M1-k   | Focus prev window          | XMonad               |
| M1-S-j / M1-S-k | Shift window               | XMonad               |
| M1-h / M1-l     | Resize window              | XMonad               |
| M1-s            | Search window              | XMonad               |
| M1-[1..9]       | Select workspace           | XMonad               |
| M1-=            | Select/create workspace    | XMonad               |
| M1-S-=          | Move window to workspace   | XMonad               |
| M1-S-[1..9]     | Move window to workspace   | XMonad               |
| M1-z / M1-/     | Select prev workspace      | XMonad               |
| M1-C-M--        | Delete workspace           | XMonad               |
| M1-e            | Focus Emacs                | XMonad               |

** Installation

*** During NixOS installation

Before ~nixos-install~, use ~initial_configuration.nix~ as configuration.nix (enables networking and sets up basic user). After ~nixos-install~, set a password for user ~tim~:

#+begin_src sh
$ passwd tim
#+end_src

*** From new NixOS installation
How to login to GitHub? Using "gh" is an option. HTTPS better than SSH?
#+begin_src sh
$ git clone git@github.com:SlimTim10/nixos-config.git /home/tim/.nix-config
$ git clone git@github.com:SlimTim10/emacs-home.git /home/tim/emacs-home
$ cd ~/.nix-config
$ cp hardware.nix.example hardware.nix
$ ./nixos-rebuild.sh
#+end_src

** Auto mount USB external drive
#+begin_src sh
$ sudo fdisk -l # find the drive
$ sudo mkdir -p /mnt/external-hdd
$ sudo mount /dev/sdx1 /mnt/external-hdd # replace sdx1 with the found drive
$ sudo mount -t ntfs -o umask=000 /dev/sdx1 /mnt/external-hdd # for NTFS-formatted drive, full R/W permission (-o umask=000 may not be needed since adding support for NTFS)
$ sudo nixos-generate-config # updates /etc/nixos/hardware-configuration.nix
#+end_src

** Storage management (garbage collection)
You can remove all but the current generation with

#+begin_src sh
$ sudo nix-collect-garbage -d
#+end_src

There are also user-specific generations for different things (eg. home-manager). These can be removed with

#+begin_src sh
$ nix-collect-garbage -d
#+end_src

More info
- https://nixos.wiki/wiki/Storage_optimization
- https://nixos.org/manual/nix/stable/#sec-garbage-collection

** File organization

General configuration is in ~configuration.nix~.

...

** Installing and removing packages (programs)

https://search.nixos.org/packages

3 different ways:

1. Permanent
   Add to packages.nix

2. Ephemeral
   [tim@nixos:~]$ nix-shell -p tty-solitaire
   [nix-shell:~]$ ttysolitaire
   [nix-shell:~]$ exit
   [tim@nixos:~]$ nix-collect-garbage

3. Global
(DON'T USE THIS)
nix-env -iA nixos.tty-solitaire

Deleting:
nix-store --query --roots /nix/store/17rr89knzpnk3hg3cb8fw63qw5lglqxk-tty-solitaire-1.3.1.drv
sudo nix store delete /nix/store/17rr89knzpnk3hg3cb8fw63qw5lglqxk-tty-solitaire-1.3.1

** Navigation

...

** Networking

Use nmtui (or nmcli) from command line

** Android file transfer

Use ~jmtpfs~ to mount the device, then use ~rsync~ as root.

#+begin_src
$ su
# nix-shell -p jmtpfs
# jmtpfs /media
# cd "/media/Internal shared storage/DCIM/Camera"
# rsync -avhP --ignore-existing IMG_2023* /mnt/external-hdd/data/Photos\ and\ Videos/2023/misc/
# rsync -avhP --ignore-existing VID_2023* /mnt/external-hdd/data/Photos\ and\ Videos/2023/misc/
#+end_src

See https://nixos.wiki/wiki/MTP.

** Backup files

Sync drives, deleting files in destination that are not in source.

#+begin_src
$ sudo fdisk -l
$ sudo mount /dev/sdx1 /media/
$ git clone git@github.com:SlimTim10/nixos-config.git /media/.nix-config
$ cd /media/.nix-config
$ git pull
$ git clone git@github.com:SlimTim10/emacs-home.git /media/emacs-home
$ cd /media/emacs-home
$ git pull
$ rsync -avhPW --delete --compress-level=0 /home/tim/Sync/ /mnt/external-hdd/data/Backups/Sync/
$ rsync -avhPW --delete --compress-level=0 /mnt/external-hdd/data/ /media/data/
$ rsync -avhPW --delete --compress-level=0 '/mnt/external-hdd/Zoom Recordings Archive/' '/media/Zoom Recordings Archive/'
#+end_src

** Secrets management

Uses [[https://github.com/ryantm/agenix][agenix]] CLI tool with the ~./secrets/secrets.nix~ file.

*** Example: Syncthing API key

1. Create a secret file:
   
   #+begin_src
   $ cd secrets
   $ agenix -e syncthingApiKey.age
   #+end_src
   
   It will open a temporary file in the app configured in your $EDITOR environment variable. When you save that file its content will be encrypted with all the public keys mentioned in the ~./secrets/secrets.nix~ file.

2. Add public keys to ~./secrets/secrets.nix~:

   #+begin_src nix
   let
     desktop = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMaUtCUyfQHn+qJvmr8nf0v83WwpOgBoNyqma71DsWR4 slimtim10@gmail.com";
   in {
     "syncthingApiKey.age".publicKeys = [ desktop ];
   }
   #+end_src

3. Add to ~./systems/desktop/services.nix~:

   #+begin_src nix
   age.secrets."syncthingApiKey" = {
     file = ../../secrets/syncthingApiKey.age;
     mode = "700";
     owner = "tim";
     group = "users";
   };
   #+end_src

4. Reference the secret's path:

   Outside home manager:

   #+begin_src nix
   syncthingApiKey = "$(cat ${config.age.secrets."syncthingApiKey".path})";
   #+end_src

   Within home manager:

   #+begin_src nix
   {
     # ...
     osConfig,
     # ...
   }:
   let
     syncthingApiKey = "$(cat ${osConfig.age.secrets."syncthingApiKey".path})";
   # ...
   #+end_src

** Troubleshooting

*** If XMonad fails to start or recompile, try using a shell that has the required dependencies:

#+begin_src
$ nix-shell -p "ghc.withPackages (pkgs: with pkgs; [ xmonad xmonad-extras xmonad-contrib ])"
$ xmonad --recompile
$ xmonad --restart
#+end_src
