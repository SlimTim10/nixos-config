* nixos-config

** Navigation Cheatsheet

Keys:
- W = Super key (Windows key)
- M = Alt
- C = Ctrl
- S = Shift

| Key           | Action                     | Program(s)           |
|---------------+----------------------------+----------------------|
| W-p           | Launch dmenu (run program) | XMonad               |
| W-x           | Lock screen                | XMonad / lock-screen |
| W-space       | Rotate window layout       | XMonad               |
| W-b           | Toggle xmobar              | XMonad / xmobar      |
| W-f           | Full screen layout         | XMonad               |
| W-o / W-j     | Focus next window          | XMonad               |
| W-S-o / W-k   | Focus prev window          | XMonad               |
| W-S-j / W-S-k | Shift window               | XMonad               |
| W-h / W-l     | Resize window              | XMonad               |
| W-s           | Search window              | XMonad               |
| W-[1..9]      | Select workspace           | XMonad               |
| W-=           | Select/create workspace    | XMonad               |
| W-S-=         | Move window to workspace   | XMonad               |
| W-S-[1..9]    | Move window to workspace   | XMonad               |
| W-z / W-/     | Select prev workspace      | XMonad               |
| W-C-M--       | Delete workspace           | XMonad               |
| W-e           | Focus Emacs                | XMonad               |

** Installation

*** During NixOS installation

Before ~nixos-install~, use ~./initial-configuration.nix~ as configuration.nix. This enables networking and sets up a basic user. After ~nixos-install~, set a password for user ~tim~:

#+begin_src sh
$ passwd tim
#+end_src

*** From new NixOS installation

#+begin_src sh
$ git clone git@github.com:SlimTim10/nixos-config.git /home/tim/.nix-config
$ cd ~/.nix-config
#+end_src

Create new system config in ~./systems~ based on ~./systems/desktop~.

#+begin_src sh
$ sudo nixos-rebuild switch --flake .#this-system
#+end_src
(Replace ~this-system~ with your new system's name.)

** Set up auto mounting external drive

#+begin_src sh
$ sudo fdisk -l # find the drive
$ sudo mkdir -p /mnt/external-hdd
$ sudo mount /dev/sdx1 /mnt/external-hdd # replace sdx1 with the found drive
$ sudo mount -t ntfs -o umask=000 /dev/sdx1 /mnt/external-hdd # for NTFS-formatted drive, full R/W permission (-o umask=000 may not be needed since adding support for NTFS)
$ sudo nixos-generate-config # updates /etc/nixos/hardware-configuration.nix
#+end_src

Copy contents of ~/etc/nixos/hardware-configuration.nix~ to ~./systems/<this-system>/hardware-configuration.nix~.

** Storage management (garbage collection)

Do garbage collection (delete unreachable paths in the Nix store):

#+begin_src sh
$ nix store gc --debug
#+end_src
(This is the recommended way for a flake-based config.)

Delete all old generations of profiles prior to deleting unreachable store objects:

#+begin_src sh
$ nix-collect-garbage -d
#+end_src

You can remove all but the current generation with:

#+begin_src sh
$ sudo nix-collect-garbage -d
#+end_src

More info
- https://nixos.wiki/wiki/Storage_optimization
- https://nixos.org/manual/nix/stable/#sec-garbage-collection

** File organization

~./flake.nix~: The starting point for this configuration. Sets the sources for packages, sets up users, and includes all the other files.

~./flake.lock~: Contains a lock for every flake input specified in ~./flake.nix~ for reproducibility.

~./configuration.nix~: Essential global configuration settings.

~./core-packages.nix~: Essential packages and miscellaneous tools included for all systems.

~./home.nix~: Used as the main configuration for the ~tim~ user. Sets all included programs and packages for ~tim~.

~./programs~: Programs that need some extra configuration. Meant to be imported by a user's configuration, such as ~./home.nix~.

~./secrets~: Encrypted secrets for values that are needed somewhere in the configuration, but shouldn't be exposed to the public. See [Secrets Management] below.

~./systems~: Configurations for separate systems, which could be separate physical machines or virtual systems (currently used for separate physical machines). Includes hardware configurations and software services.

** Installing, removing, and updating packages (programs)

To find a package and its name, search at:

https://search.nixos.org/packages

To install a package for the user ~tim~, add it to ~./home.nix~.

To install a package in an ephemeral shell:

#+begin_src sh
$ nix shell nixpkgs#hello
$ hello
$ exit
#+end_src

To delete a package, find it in the nix store and try using these commands:

#+begin_src sh
$ ls /nix/store | ag solitaire
$ nix-store --query --roots /nix/store/17rr89knzpnk3hg3cb8fw63qw5lglqxk-tty-solitaire-1.3.1.drv
$ sudo nix store delete /nix/store/17rr89knzpnk3hg3cb8fw63qw5lglqxk-tty-solitaire-1.3.1
#+end_src

To update ~./flake.lock~ for all inputs in ~./flake.nix~:

#+begin_src sh
$ nix flake update
#+end_src

** Networking

Use nmtui (or nmcli) from command line

** Android file transfer

Use ~jmtpfs~ to mount the device, then use ~rsync~ as root.

#+begin_src
$ jmtpfs /media
$ cd "/media/Internal shared storage/DCIM/Camera"
$ sudo rsync -avhP --ignore-existing IMG_2023* /mnt/external-hdd/data/Photos\ and\ Videos/2023/misc/
$ sudo rsync -avhP --ignore-existing VID_2023* /mnt/external-hdd/data/Photos\ and\ Videos/2023/misc/
#+end_src

See https://nixos.wiki/wiki/MTP.

** Backup files

Sync drives, deleting files in destination that are not in source.

#+begin_src sh
$ sudo fdisk -l
$ sudo mount /dev/sdx1 /media/
$ git clone git@github.com:SlimTim10/nixos-config.git /media/.nix-config
$ cd /media/.nix-config
$ git pull
$ rsync -avhPW --delete --compress-level=0 /home/tim/Sync/ /mnt/external-hdd/data/Backups/Sync/
$ rsync -avhPW --delete --compress-level=0 /mnt/external-hdd/data/ /media/data/
$ rsync -avhPW --delete --compress-level=0 '/mnt/external-hdd/Zoom Recordings Archive/' '/media/Zoom Recordings Archive/'
#+end_src

** Secrets management

Uses [[https://github.com/ryantm/agenix][agenix]] CLI tool with the ~./secrets/secrets.nix~ file.

*** Example: Syncthing API key

1. Create a secret file:
   
   #+begin_src sh
   $ cd secrets
   $ agenix -e syncthingApiKey.age
   #+end_src
   
   It will open a temporary file in the app configured in your $EDITOR environment variable. When you save that file its content will be encrypted with all the public keys mentioned in the ~./secrets/secrets.nix~ file.

2. Add public keys to ~./secrets/secrets.nix~:

   #+begin_src nix
   let
     desktop = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMaUtCUyfQHn+qJvmr8nf0v83WwpOgBoNyqma71DsWR4 slimtim10@gmail.com";
   in {
     "syncthingApiKey.age".publicKeys = [ desktop ];
   }
   #+end_src

3. Add to ~./systems/desktop/services.nix~:

   #+begin_src nix
   age.secrets."syncthingApiKey" = {
     file = ../../secrets/syncthingApiKey.age;
     mode = "700";
     owner = "tim";
     group = "users";
   };
   #+end_src

4. Reference the secret's path:

   Outside home manager:

   #+begin_src nix
   syncthingApiKey = "$(cat ${config.age.secrets."syncthingApiKey".path})";
   #+end_src

   Within home manager:

   #+begin_src nix
   {
     # ...
     osConfig,
     # ...
   }:
   let
     syncthingApiKey = "$(cat ${osConfig.age.secrets."syncthingApiKey".path})";
   # ...
   #+end_src

** Troubleshooting

*** If XMonad fails to start or recompile, try using a shell that has the required dependencies:

#+begin_src sh
$ nix-shell -p "ghc.withPackages (pkgs: with pkgs; [ xmonad xmonad-extras xmonad-contrib ])"
$ xmonad --recompile
$ xmonad --restart
#+end_src

*** Classic Nix commands replaced by flakes

| Classic             | Flake                 |
|---------------------+-----------------------|
| nix-channel         | inputs in flake.nix   |
| nix-shell           | nix develop/shell/run |
| nix-build           | nix build             |
| nix-collect-garbage | nix store gc --debug  |
